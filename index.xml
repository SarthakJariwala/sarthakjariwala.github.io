<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sarthak Jariwala</title>
    <link>https://sarthakjariwala.github.io/</link>
    <description>Recent content on Sarthak Jariwala</description>
    <image>
      <url>https://sarthakjariwala.github.io/105</url>
      <link>https://sarthakjariwala.github.io/105</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Sep 2021 19:59:05 -0700</lastBuildDate><atom:link href="https://sarthakjariwala.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Build &amp; Run a Single Service in docker-compose</title>
      <link>https://sarthakjariwala.github.io/til/docker/build-run-single-service/</link>
      <pubDate>Sat, 25 Sep 2021 19:59:05 -0700</pubDate>
      
      <guid>https://sarthakjariwala.github.io/til/docker/build-run-single-service/</guid>
      <description>Build and run single service using docker-compose</description>
    </item>
    
    <item>
      <title>Codespell - check spelling</title>
      <link>https://sarthakjariwala.github.io/til/python/codespell/</link>
      <pubDate>Wed, 04 Aug 2021 21:36:58 -0700</pubDate>
      
      <guid>https://sarthakjariwala.github.io/til/python/codespell/</guid>
      <description>I came across codespell via Simon Willison&amp;rsquo;s tweet.
Codespell is a python library that provides a cli to check and fix common misspellings in text files.
Just running it against the content of this website, I discovered a few misspellings.
codespell content The changes suggested by codespell can be implemented with a -w flag.</description>
    </item>
    
    <item>
      <title>LocalDaskExecutor : num_workers</title>
      <link>https://sarthakjariwala.github.io/til/prefect/local-dask-executor/</link>
      <pubDate>Tue, 03 Aug 2021 16:00:55 -0700</pubDate>
      
      <guid>https://sarthakjariwala.github.io/til/prefect/local-dask-executor/</guid>
      <description>Recently, I was using prefect to run a few workflows locally. I wanted to run one of the workflows in parallel using LocalDaskExecutor. That&amp;rsquo;s when I learned that LocalDaskExecutor uses num_workers and DaskExecutor uses n_workers to specify the number of workers.
With LocalDaskExecutor from prefect.executors import LocalDaskExecutor if __name__ == &amp;#34;__main__&amp;#34;: flow.run(executor=LocalDaskExecutor(scheduler=&amp;#34;processes&amp;#34;, num_workers=16)) With DaskExecutor from prefect.executors import DaskExecutor if __name__ == &amp;#34;__main__&amp;#34;: flow.run(executor=DaskExecutor(cluster_kwargs={&amp;#34;n_workers&amp;#34;: 16})) </description>
    </item>
    
    <item>
      <title>How Sunny is Seattle?</title>
      <link>https://sarthakjariwala.github.io/posts/sunny-in-seattle/</link>
      <pubDate>Sun, 14 Mar 2021 13:35:10 -0700</pubDate>
      
      <guid>https://sarthakjariwala.github.io/posts/sunny-in-seattle/</guid>
      <description>A comparative look at solar resource availability</description>
    </item>
    
    <item>
      <title>Attractive, Effective &amp; Descriptive Image Visualization in Python</title>
      <link>https://sarthakjariwala.github.io/posts/introducing-seaborn-image/</link>
      <pubDate>Fri, 26 Feb 2021 09:56:20 -0800</pubDate>
      
      <guid>https://sarthakjariwala.github.io/posts/introducing-seaborn-image/</guid>
      <description>Introducing `seaborn-image` for image visualization in Python</description>
    </item>
    
    <item>
      <title>Effective Visualization of Multi-Dimension Image Data in Python</title>
      <link>https://sarthakjariwala.github.io/posts/multi-dimension-image-data/</link>
      <pubDate>Wed, 24 Feb 2021 18:59:05 -0800</pubDate>
      
      <guid>https://sarthakjariwala.github.io/posts/multi-dimension-image-data/</guid>
      <description>Got multi-dimensional image data? Python can help!</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://sarthakjariwala.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sarthakjariwala.github.io/about/</guid>
      <description>Researcher and Data Scientist at Palo Alto Research Center with extensive experience in providing actionable insights from data collected and critically analyzed with scientific rigor.
Interested in working on solutions combining data science and software expertise with core scientific rigor.
Expertise in communicating complex data to stakeholders and technical &amp;amp; general audience.
You can contact me here or connect with me on LinkedIn/Twitter.</description>
    </item>
    
    
    <item>
      <title>Projects</title>
      <link>https://sarthakjariwala.github.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sarthakjariwala.github.io/projects/</guid>
      <description>List of some of my projects. You can learn more about the projects below.
 seaborn-image : Open-source image visualization in Python nrel-dev-api : Python API for accessing National Renewable Energy Lab developer resources SQ Web &amp;amp; Desktop App : Calculate solar cell&amp;rsquo;s maximum theoretical efficiency Structure-Property Relationships : Elucidate structure-property relationships in next-generation solar cell technology Solar Techno-Economic Analysis : To design solar powered community library &amp;amp; school in rural Ghana Automated Defect Discovery : Physics-informed deep learning on 2D materials Predictive Peptide Analysis : Machine learning for predictive analysis of self-assembled peptides Data Acquisiton Application : Intuitive platform for acquiring data from scientific hardware/instruments GLabViz : Desktop application for scientific data analysis BZMAN : Business management desktop application BZMAN Website : Flask application facilitating application download and other functionalities Other Open-Source Contributions : matpltolib-scalebar, pyscaffold-interactive, etc.</description>
    </item>
    
    
  </channel>
</rss>
