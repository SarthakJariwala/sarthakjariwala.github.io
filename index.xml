<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sarthak Jariwala</title>
    <link>https://sarthakjariwala.github.io/</link>
    <description>Recent content on Sarthak Jariwala</description>
    <image>
      <url>https://sarthakjariwala.github.io/105</url>
      <link>https://sarthakjariwala.github.io/105</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Nov 2021 15:51:33 -0700</lastBuildDate><atom:link href="https://sarthakjariwala.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Array Padding - Only One Side</title>
      <link>https://sarthakjariwala.github.io/til/numpy/pad-an-array/</link>
      <pubDate>Tue, 02 Nov 2021 15:51:33 -0700</pubDate>
      
      <guid>https://sarthakjariwala.github.io/til/numpy/pad-an-array/</guid>
      <description>numpy.pad provides an easy way to pad a numpy array. For instance, if you want to add two 3&amp;rsquo;s and four -7&amp;rsquo;s to an array, you can do the following -
import numpy as np  a = np.array([1, 2, -1])  np.pad(a, (2, 4), &amp;#34;constant&amp;#34;, constant_values=(3, -7))  # array([ 3, 3, 1, 2, -1, -7, -7, -7, -7]) But, what if you only want to pad the right side or left side?</description>
    </item>
    
    <item>
      <title>Build &amp; Run a Single Service in docker-compose</title>
      <link>https://sarthakjariwala.github.io/til/docker/build-run-single-service/</link>
      <pubDate>Sat, 25 Sep 2021 19:59:05 -0700</pubDate>
      
      <guid>https://sarthakjariwala.github.io/til/docker/build-run-single-service/</guid>
      <description>Build and run single service using docker-compose</description>
    </item>
    
    <item>
      <title>Codespell - check spelling</title>
      <link>https://sarthakjariwala.github.io/til/python/codespell/</link>
      <pubDate>Wed, 04 Aug 2021 21:36:58 -0700</pubDate>
      
      <guid>https://sarthakjariwala.github.io/til/python/codespell/</guid>
      <description>I came across codespell via Simon Willison&amp;rsquo;s tweet.
Codespell is a python library that provides a cli to check and fix common misspellings in text files.
Just running it against the content of this website, I discovered a few misspellings.
codespell content The changes suggested by codespell can be implemented with a -w flag.</description>
    </item>
    
    <item>
      <title>LocalDaskExecutor : num_workers</title>
      <link>https://sarthakjariwala.github.io/til/prefect/local-dask-executor/</link>
      <pubDate>Tue, 03 Aug 2021 16:00:55 -0700</pubDate>
      
      <guid>https://sarthakjariwala.github.io/til/prefect/local-dask-executor/</guid>
      <description>Recently, I was using prefect to run a few workflows locally. I wanted to run one of the workflows in parallel using LocalDaskExecutor. That&amp;rsquo;s when I learned that LocalDaskExecutor uses num_workers and DaskExecutor uses n_workers to specify the number of workers.
With LocalDaskExecutor from prefect.executors import LocalDaskExecutor  if __name__ == &amp;#34;__main__&amp;#34;:  flow.run(executor=LocalDaskExecutor(scheduler=&amp;#34;processes&amp;#34;, num_workers=16)) With DaskExecutor from prefect.executors import DaskExecutor  if __name__ == &amp;#34;__main__&amp;#34;:  flow.run(executor=DaskExecutor(cluster_kwargs={&amp;#34;n_workers&amp;#34;: 16})) </description>
    </item>
    
    <item>
      <title>How Sunny is Seattle?</title>
      <link>https://sarthakjariwala.github.io/posts/sunny-in-seattle/</link>
      <pubDate>Sun, 14 Mar 2021 13:35:10 -0700</pubDate>
      
      <guid>https://sarthakjariwala.github.io/posts/sunny-in-seattle/</guid>
      <description>A comparative look at solar resource availability</description>
    </item>
    
    <item>
      <title>Attractive, Effective &amp; Descriptive Image Visualization in Python</title>
      <link>https://sarthakjariwala.github.io/posts/introducing-seaborn-image/</link>
      <pubDate>Fri, 26 Feb 2021 09:56:20 -0800</pubDate>
      
      <guid>https://sarthakjariwala.github.io/posts/introducing-seaborn-image/</guid>
      <description>Introducing `seaborn-image` for image visualization in Python</description>
    </item>
    
    <item>
      <title>Effective Visualization of Multi-Dimension Image Data in Python</title>
      <link>https://sarthakjariwala.github.io/posts/multi-dimension-image-data/</link>
      <pubDate>Wed, 24 Feb 2021 18:59:05 -0800</pubDate>
      
      <guid>https://sarthakjariwala.github.io/posts/multi-dimension-image-data/</guid>
      <description>Got multi-dimensional image data? Python can help!</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://sarthakjariwala.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sarthakjariwala.github.io/about/</guid>
      <description>I am currently a Researcher and Data Scientist at Palo Alto Research Center Inc.
I have 7+ years of experience working in collaborative scientific research and on solutions combining data science and software expertise with core scientific rigor.
I also have 5+ years of experience working at the intersection of materials science, data science, and artificial intelligence.
I have published 10+ peer-reviewed articles in leading materials and energy journals.
I also have extensive experience developing software tools and libraries.</description>
    </item>
    
    
    <item>
      <title>Open Source Software</title>
      <link>https://sarthakjariwala.github.io/open-source-software/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sarthakjariwala.github.io/open-source-software/</guid>
      <description>I am the creator and maintainer of the following projects:
seaborn-image  High-level API for attractive and descriptive image visualization in Python.
 GitHub | Documentation | Introductory Post
EZconda  Create, Manage, Re-create conda environments &amp;amp; specifications with ease.
 GitHub | Documentation
nrel-dev-api  Developer friendly Python API for accessing National Renewable Energy Lab developer resources.
 GitHub | Documentation | Introductory Post
prayog  Optimization API for experimental science.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://sarthakjariwala.github.io/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sarthakjariwala.github.io/projects/</guid>
      <description>Selected list of my projects (publicly shareable). You can learn more about the projects below.
 Structure-Property Relationships in Hybrid Materials : Elucidate structure-property relationships in next-generation solar cell technology. Automated Defect Discovery : Physics-informed deep learning on 2D materials. Predictive Peptide Analysis : Machine learning for predictive analysis of self-assembled peptides. Solar Techno-Economic Analysis : To design solar powered community library &amp;amp; school in rural Ghana.   Structure-Property Relationships in Novel Solar Energy Materials Used statistical methods in combination with expertise in image &amp;amp; data analysis and domain knowledge to elucidate structure-property relationships in next-generation solar cell technology.</description>
    </item>
    
    
  </channel>
</rss>
